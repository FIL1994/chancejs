import { testRange } from "../../helpers";

/**
 *  Gives an array of n random terms
 *
 *  @param {Function} fn the function that generates something random
 *  @param {Number} n number of terms to generate
 *  @returns {Array} an array of length `n` with items generated by `fn`
 *
 *  There can be more parameters after these. All additional parameters are provided to the given function
 */
const n = (fn, n) => {
  testRange(
    typeof fn !== "function",
    "Chance: The first argument must be a function."
  );

  if (typeof n === "undefined") {
    n = 1;
  }
  var i = n,
    arr = [],
    params = Array.prototype.slice.call(arguments, 2);

  // Providing a negative count should result in a noop.
  i = Math.max(0, i);

  for (null; i--; null) {
    arr.push(fn.apply(this, params));
  }

  return arr;
};

export default n;
